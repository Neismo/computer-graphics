<!DOCTYPE html>
<html>
    <meta charset="UTF-8">
    <body>
        <canvas id="W1-canvas" width="800" height="800"></canvas>

        <script type="text/javascript" src="../Common/webgl-utils.js"></script>
        <script type="text/javascript" src="../Common/initShaders.js"></script>
        <script type="text/javascript" src="../Common/MV.js"></script>
        <script type="text/javascript" src="../Common/OBJParser.js"></script>
        <script type="text/javascript" src="stuff.js"></script>

        <script id="vertex-shader" type="x-shader/x-vertex">
            attribute vec4 vPosition;
            attribute vec4 vNormal;
            attribute vec4 vColor;


            uniform mat4 modelMatrix;
            uniform mat4 projectionMatrix;
            uniform mat4 viewMatrix;

            varying vec4 fNormal;
            varying vec4 pos;
            varying vec4 fColor;

            void main(){
                pos = modelMatrix * vPosition;
                fNormal = vNormal;

                fColor = vColor;
                
                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vPosition;
            }
        </script>
        
        <script id="fragment-shader" type="x-shader/x-fragment">
            precision mediump float;
            
            uniform vec3 eyePoint;
            uniform vec4 lightPos;
            uniform vec4 lightEmis;
            uniform vec4 lightAmb;
            uniform vec4 kd;   
            uniform vec4 ka; 
            uniform vec4 ks;
            uniform float alpha;

            varying vec4 fNormal;
            varying vec4 pos;
            varying vec4 fColor;

            void main(){
                vec3 w_i = lightPos.w == 0.0 ? normalize(-lightPos.xyz) : normalize(lightPos.xyz - pos.xyz);
                vec3 w_r = 2.0 * (dot(w_i, normalize(fNormal.xyz))) * normalize(fNormal.xyz) - w_i;

                vec4 ld = kd * lightEmis * max( dot(normalize(fNormal.xyz), w_i) , 0.0);

                vec3 w_o = normalize(eyePoint - pos.xyz); 

                vec4 lsp = ks * lightEmis * pow ( max( dot(w_r, w_o) , 0.0) , alpha );

                vec4 lo = ld + lsp + ka * lightAmb * fColor;
                lo.w = 1.0;

                gl_FragColor = lo;
            }
        </script>

        <script id="vertex-shader-quad" type="x-shader/x-vertex">
            attribute vec4 vPosition;
            attribute vec2 vTexCoord;

            varying vec2 fTexCoord;

            uniform mat4 modelMatrix;
            uniform mat4 projectionMatrix;
            uniform mat4 viewMatrix;


            void main(){

                gl_Position =  projectionMatrix * viewMatrix * modelMatrix * vPosition;
                

                fTexCoord = vTexCoord;
            }
        </script>
        
        <script id="fragment-shader-quad" type="x-shader/x-fragment">
            precision mediump float;

            varying vec2 fTexCoord;

            uniform sampler2D texMap;

            void main(){
            gl_FragColor = texture2D(texMap, fTexCoord);
        }
        </script>

        <script type="text/javascript" src="w10p1.js"></script><button id="but3">Pause/Resume</button><br>
        Ka: <input type="range" min="0" max="100" value="50" class="slider" id="sKa"><br>
        Kd: <input type="range" min="0" max="100" value="50" class="slider" id="sKd"><br>
        Ks:<input type="range" min="0" max="100" value="0" class="slider" id="sKs"><br>
        Alpha: <input type="range" min="100" max="10000" value="100" class="slider" id="sAlpha"><br>
        Emis: <input type="range" min="0.0" max="200" value="100" class="slider" id="sEmis">
    </body>
</html>